<?xml version="1.0"?>
<ruleset name="PhoneBurner"
         namespace="PhoneBurner\CodingStandard"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="../vendor/squizlabs/php_codesniffer/phpcs.xsd"
>
    <description>PhoneBurner Coding Standard</description>

    <!-- There's no standalone standard for PER-CS, so we include the PSR12 standard, -->
    <!-- which also includes PSR1 and related sniffs, and add/configure individual -->
    <!-- sniffs from other standards as needed. -->
    <rule ref="PSR12"/>

    <!-- Conditionals must use "elseif" instead of "else if" -->
    <rule ref="PSR2.ControlStructures.ElseIfDeclaration">
        <type>error</type>
    </rule>

    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>

    <!-- The PHP_SAPI constant must be used instead of the php_sapi_name() method -->
    <rule ref="Generic.PHP.SAPIUsage"/>

    <!-- Use of the Backtick Operator (`) is Prohibited - Use \shell_exec() Instead -->
    <rule ref="Generic.PHP.BacktickOperator"/>

    <!-- PER-CS: Require Trailing Commas in Multiline Arrays, Calls, and Declarations -->
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma"/>
    <rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInCall"/>
    <rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInClosureUse"/>
    <rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInDeclaration"/>

    <!-- PHP Attribute Spacing Rules -->
    <rule ref="SlevomatCodingStandard.Attributes.AttributeAndTargetSpacing">
        <properties>
            <property name="allowOnSameLine" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Attributes.DisallowMultipleAttributesPerLine"/>
    <rule ref="SlevomatCodingStandard.Attributes.RequireAttributeAfterDocComment"/>

    <rule ref="SlevomatCodingStandard.Classes.BackedEnumTypeSpacing">
        <properties>
            <property name="spacesCountBeforeColon" value="0"/>
            <property name="spacesCountBeforeType" value="1"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Classes.ClassMemberSpacing">
        <properties>
            <property name="linesCountBetweenMembers" value="1"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Classes.ConstantSpacing">
        <properties>
            <property name="minLinesCountBeforeWithComment" value="0"/>
            <property name="maxLinesCountBeforeWithComment" value="1"/>
            <property name="minLinesCountBeforeWithoutComment" value="0"/>
            <property name="maxLinesCountBeforeWithoutComment" value="1"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Classes.EnumCaseSpacing">
        <properties>
            <property name="minLinesCountBeforeWithComment" value="0"/>
            <property name="maxLinesCountBeforeWithComment" value="1"/>
            <property name="minLinesCountBeforeWithoutComment" value="0"/>
            <property name="maxLinesCountBeforeWithoutComment" value="1"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Classes.MethodSpacing">
        <properties>
            <property name="minLinesCount" value="1"/>
            <property name="maxLinesCount" value="1"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Classes.PropertySpacing">
        <properties>
            <property name="minLinesCountBeforeWithComment" value="0"/>
            <property name="maxLinesCountBeforeWithComment" value="1"/>
            <property name="minLinesCountBeforeWithoutComment" value="0"/>
            <property name="maxLinesCountBeforeWithoutComment" value="1"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Classes.TraitUseSpacing">
        <properties>
            <property name="linesCountBeforeFirstUseWhenFirstInClass" value="0"/>
            <property name="linesCountBeforeFirstUse" value="1"/>
            <property name="linesCountBetweenUses" value="0"/>
            <property name="linesCountAfterLastUse" value="1"/>
            <property name="linesCountAfterLastUseWhenLastInClass" value="0"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing"/>
    <rule ref="SlevomatCodingStandard.Functions.NamedArgumentSpacing"/>

    <rule ref="SlevomatCodingStandard.Classes.ClassStructure">
        <properties>
            <property name="groups" type="array">
                <element value="uses"/>
                <element value="enum cases"/>
                <element value="constants"/>
                <element value="properties"/>
                <element value="methods"/>
            </property>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.PropertyDeclaration"/>
    <rule ref="SlevomatCodingStandard.Classes.RequireMultiLineMethodSignature"/>
    <rule ref="SlevomatCodingStandard.Classes.TraitUseDeclaration"/>
    <rule ref="SlevomatCodingStandard.Classes.UselessLateStaticBinding"/>
    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment"/>
    <rule ref="SlevomatCodingStandard.Classes.RequireSelfReference"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses"/>
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses"/>
    <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalConstants"/>
    <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalFunctions"/>
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <property name="searchAnnotations" value="true"/>
        </properties>
    </rule>

    <!-- PHP optimizes some internal functions into special opcodes, but only if the function args are not unpacked. -->
    <rule ref="SlevomatCodingStandard.PHP.OptimizedFunctionsWithoutUnpacking"/>

    <!-- Enforces using shorthand cast operators, e.g. (int), forbids use of (unset) and (binary) cast operators -->
    <rule ref="SlevomatCodingStandard.PHP.TypeCast"/>

    <!-- Prohibit useless semicolons and parentheses (unless in a complex ternary expression)-->
    <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon"/>
    <rule ref="SlevomatCodingStandard.PHP.UselessParentheses">
        <properties>
            <property name="ignoreComplexTernaryConditions" value="true"/>
        </properties>
    </rule>

    <!-- Prohibit "Yoda Comparisons" like `null === $foo` for consistency -->
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison"/>

    <!-- Prohibit assignment in conditions (other than while loops)-->
    <rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition"/>

    <!-- Prohibit Duplicate Whitespace -->
    <rule ref="SlevomatCodingStandard.Whitespaces.DuplicateSpaces"/>

    <!-- Prohibit Duplicate Empty Lines -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <property name="ignoreBlankLines" value="false"/>
        </properties>
    </rule>
    <!-- This sniff is disabled in the PSR12 standard, so we need to reset the severity -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <severity>5</severity>
    </rule>

    <!-- If a file includes the strict types declaration, it must have the following spacing -->
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <exclude name="SlevomatCodingStandard.TypeHints.DeclareStrictTypes.DeclareStrictTypesMissing"/>
        <properties>
            <property name="linesCountBeforeDeclare" value="1"/>
            <property name="linesCountAfterDeclare" value="1"/>
            <property name="spacesCountAroundEqualsSign" value="0"/>
        </properties>
    </rule>

    <!-- Detect left over merge conflict markers -->
    <rule ref="Generic.VersionControl.GitMergeConflict"/>

    <!-- Disallow Deprecated Implicitly Nullable Parameter Types (PHP 8.4)-->
    <!-- https://wiki.php.net/rfc/deprecate-implicitly-nullable-types -->
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>
    <rule ref="SlevomatCodingStandard.TypeHints.DNFTypeHintFormat">
        <properties>
            <property name="enable" value="yes"/>
            <property name="withSpacesAroundOperators" value="no"/>
            <property name="withSpacesInsideParentheses" value="no"/>
            <property name="shortNullable" value="no"/>
            <property name="nullPosition" value="last"/>
        </properties>
    </rule>

    <!-- No extra padding inside of parentheses -->
    <rule ref="Generic.WhiteSpace.ArbitraryParenthesesSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- Zero spaces are required after the unary cast operators -->
    <rule ref="Generic.Formatting.SpaceAfterCast">
        <properties>
            <property name="spacing" value="0"/>
        </properties>
    </rule>

    <!-- One space is required after the unary not (!) operator -->
    <rule ref="Generic.Formatting.SpaceAfterNot"/>

    <rule ref="Generic.WhiteSpace.SpreadOperatorSpacingAfter"/>
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- All files must declare strict types -->
    <rule ref="Generic.PHP.RequireStrictTypes"/>

    <!-- Prohibit extra spaces around and semicolons -->
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>

    <!-- Enforces using short form of list syntax, [...] instead of list(...) -->
    <rule ref="SlevomatCodingStandard.PHP.ShortList"/>

    <!-- Class constants must declare a native type hint if able (keep comments/annotations for PHPStan) -->
    <rule ref="SlevomatCodingStandard.TypeHints.ClassConstantTypeHint">
        <exclude name="SlevomatCodingStandard.TypeHints.ClassConstantTypeHint.UselessVarAnnotation"/>
        <exclude name="SlevomatCodingStandard.TypeHints.ClassConstantTypeHint.UselessDocComment"/>
    </rule>
</ruleset>
